module top_smh (
    input clk,
    input rst,
    input in,
    output out
);
    wire [5:0] sencond_out, minute_out, hour_out; // use wire to bcd and display 7- 
    reg next_minute;
    reg next_hour;
    reg next_day;

    SecondsCounter inst_sec (
        .clk(clk),
        .rst(rst),
        .next_minute(next_minute),
        .senconds(sencond_out)
    );

    MinutesCounter inst_min (
        .clk(clk),
        .rst(rst),
        .next_hour(next_hour),
        .minutes(minute_out)
    );

    HoursCounter inst_hour (
        .clk(clk),
        .rst(rst),
        .next_day (next_day),
        .hours(hour_out)
    );
endmodule

module SecondsCounter (
    input clk,
    input rst,
    output reg [5:0] seconds,
    output reg next_minute 
);
    localparam divider = 2;
    reg [31:0] counter;
    reg [5:0] sec_counter;

    always @(posedge clk_50MHz or negedge rst)begin
        if (~rst) begin      // reset khi clock ở mức logic 0
            counter <= 0;
            sec_counter <= 6'b000000;
            next_minute <= 1'b0;
        end else begin
            if (counter == divider) begin
                counter <= 0;
                if (sec_counter == 6'b111011) begin
                    sec_counter = 6'b000000;
                    next_minute = 1'b1;
                end else begin
                    sec_counter <= sec_counter + 1;
                    next_minute <= 1'b0;
                end
            end else begin
                counter <= counter + 1;
            end
        end
    end
    assign seconds = sec_counter; // gan' ouput de? muc dich hien thi led 7 thanh
endmodule

module MinutesCounter (
    input clk,     
    input rst,
    input next_minute,
    output reg [5:0] minutes, 
    output reg next_hour 
);
reg [5:0] minute_counter;  // Lưu trữ biến đếm phút

always @(posedge clk or negedge rst) begin
    if (~rst) begin
        minute_counter <= 6'b000000;
        next_hour <= 1'b0;
    end else if(next_minute == 1)begin
        if (minute_counter == 6'b111011) begin
            minute_counter <= 6'b000000; 
            next_hour <= 1'b1;
        end else begin
            minute_counter <= minute_counter + 1;
            next_hour <= 1'b0;
        end
    end
end
assign minutes = minute_counter;
endmodule



module HoursCounter (
    input clk,
    input rst,
    input next_hour,
    output reg [4:0] hours,
    output reg next_day
);

reg [4:0] hour_counter;

always @(posedge clk or negedge rst) begin
    if (~rst) begin
        hour_counter <= 5'b00000;
        next_day <= 1'b0;
    end else if(next_hour==1) begin
        if (hour_counter == 5'b10111) begin
            hour_counter <= 5'b00000; // Reset hour_counter when it = 23
            next_day <= 1'b1;
        end else begin
            hour_counter <= hour_counter + 1;
            next_day <= 1'b0;
        end
    end
end
assign hours = hour_counter;
endmodule